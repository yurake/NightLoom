/**
 * Session Cleanup Utilities
 * 
 * „Çª„ÉÉ„Ç∑„Éß„É≥„Éá„Éº„Çø„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„ÇíË°å„ÅÜ„É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£Èñ¢Êï∞Áæ§
 * LocalStorage„ÄÅ„Çª„ÉÉ„Ç∑„Éß„É≥Áä∂ÊÖã„ÄÅÁµêÊûú„Éá„Éº„Çø„ÅÆÁÆ°ÁêÜ
 */

/**
 * LocalStorage„ÅÆ„Ç≠„ÉºÂÆöÊï∞
 */
export const STORAGE_KEYS = {
  SESSION_ID: 'nightloom_session_id',
  SESSION_STATE: 'nightloom_session_state', 
  RESULT_DATA: 'nightloom_result_data',
  USER_PROGRESS: 'nightloom_user_progress',
} as const;

/**
 * „Çª„ÉÉ„Ç∑„Éß„É≥Èñ¢ÈÄ£„Éá„Éº„Çø„ÅÆÂÆåÂÖ®„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
 * Êñ∞„Åó„ÅÑË®∫Êñ≠ÈñãÂßãÊôÇ„Å´Âëº„Å≥Âá∫„Åï„Çå„Çã
 */
export function clearAllSessionData(): void {
  try {
    // LocalStorage„Åã„Çâ„Çª„ÉÉ„Ç∑„Éß„É≥Èñ¢ÈÄ£„Éá„Éº„Çø„ÇíÂâäÈô§
    Object.values(STORAGE_KEYS).forEach(key => {
      localStorage.removeItem(key);
    });

    // SessionStorage„ÇÇ„ÇØ„É™„Ç¢
    if (typeof sessionStorage !== 'undefined') {
      sessionStorage.clear();
    }

    console.log('Session data cleared successfully');
  } catch (error) {
    console.warn('Failed to clear session ', error);
  }
}

/**
 * ÁâπÂÆö„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥ID„ÅÆ„Éá„Éº„Çø„Çí„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
 * @param sessionId „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„ÉóÂØæË±°„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥ID
 */
export function clearSessionById(sessionId: string): void {
  try {
    const currentSessionId = localStorage.getItem(STORAGE_KEYS.SESSION_ID);
    
    // ÊåáÂÆö„Åï„Çå„Åü„Çª„ÉÉ„Ç∑„Éß„É≥ID„ÅåÁèæÂú®„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥„Å®‰∏ÄËá¥„Åô„ÇãÂ†¥Âêà„ÅÆ„Åø„ÇØ„É™„Ç¢
    if (currentSessionId === sessionId) {
      clearAllSessionData();
      console.log(`Session ${sessionId} cleared successfully`);
    } else {
      console.log(`Session ID mismatch, skipping cleanup: ${sessionId}`);
    }
  } catch (error) {
    console.warn('Failed to clear session by ID:', error);
  }
}

/**
 * ÁµêÊûú„Éá„Éº„Çø„ÅÆ„Åø„Çí„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
 * „Çª„ÉÉ„Ç∑„Éß„É≥ID„ÅØ‰øùÊåÅ„Åó„Å§„Å§„ÄÅÁµêÊûú„Ç≠„É£„ÉÉ„Ç∑„É•„ÅÆ„ÅøÂâäÈô§
 */
export function clearResultData(): void {
  try {
    localStorage.removeItem(STORAGE_KEYS.RESULT_DATA);
    console.log('Result data cleared successfully');
  } catch (error) {
    console.warn('Failed to clear result ', error);
  }
}

/**
 * „É°„É¢„É™ÂÜÖ„ÅÆÁä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
 * React„ÅÆÁä∂ÊÖãÁÆ°ÁêÜ„ÇÑ„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„ÅÆ„É™„Çª„ÉÉ„Éà„Å´‰ΩøÁî®
 */
export function resetMemoryState(): void {
  // Window „Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Å´„Ç¢„Çø„ÉÉ„ÉÅ„Åï„Çå„Å¶„ÅÑ„ÇãÂèØËÉΩÊÄß„ÅÆ„ÅÇ„ÇãÁä∂ÊÖã„Çí„ÇØ„É™„Ç¢
  if (typeof window !== 'undefined') {
    // „Ç´„Çπ„Çø„É†„Ç§„Éô„É≥„Éà„ÇíÁô∫ÁÅ´„Åó„Å¶React„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Å´ÈÄöÁü•
    window.dispatchEvent(new CustomEvent('nightloom:session-reset', {
      detail: { timestamp: Date.now() }
    }));
  }
}

/**
 * „Éñ„É©„Ç¶„Ç∂„Éê„ÉÉ„ÇØÁÑ°ÂäπÂåñ„ÅÆ„Åü„ÇÅ„ÅÆÂ±•Ê≠¥Êìç‰Ωú
 * „Çª„ÉÉ„Ç∑„Éß„É≥Áã¨Á´ãÊÄß„Çí‰øùË®º
 */
export function replaceHistoryForSessionIsolation(): void {
  if (typeof window !== 'undefined' && window.history) {
    try {
      // ÁèæÂú®„ÅÆURL„ÇíÂ±•Ê≠¥„Å´ÁΩÆÊèõÔºàÊàª„Çã„Éú„Çø„É≥„Åß„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåÊ∑∑Âú®„Åó„Å™„ÅÑ„Çà„ÅÜ„Å´Ôºâ
      window.history.replaceState(
        { nightloom: true, timestamp: Date.now() },
        '',
        window.location.pathname
      );
      console.log('History replaced for session isolation');
    } catch (error) {
      console.warn('Failed to replace history:', error);
    }
  }
}

/**
 * Ë®∫Êñ≠ÂÜçÈñãÂßãÊôÇ„ÅÆÂåÖÊã¨ÁöÑ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
 * „Äå„ÇÇ„ÅÜ‰∏ÄÂ∫¶Ë®∫Êñ≠„Åô„Çã„Äç„Éú„Çø„É≥„Åã„ÇâÂëº„Å≥Âá∫„Åï„Çå„Çã
 */
export function performRestartCleanup(): void {
  console.log('Starting comprehensive restart cleanup...');
  
  // 1. „Çª„ÉÉ„Ç∑„Éß„É≥„Éá„Éº„Çø„ÇØ„É™„Ç¢
  clearAllSessionData();
  
  // 2. „É°„É¢„É™Áä∂ÊÖã„É™„Çª„ÉÉ„Éà
  resetMemoryState();
  
  // 3. Â±•Ê≠¥Êìç‰Ωú
  replaceHistoryForSessionIsolation();
  
  console.log('Restart cleanup completed');
}

/**
 * „Çª„ÉÉ„Ç∑„Éß„É≥Áä∂ÊÖã„ÅÆÊ§úË®º
 * ÁèæÂú®„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåÊúâÂäπ„Åã„Å©„ÅÜ„Åã„Çí„ÉÅ„Çß„ÉÉ„ÇØ
 */
export function validateSessionState(): {
  isValid: boolean;
  sessionId: string | null;
  hasResultData: boolean;
} {
  try {
    const sessionId = localStorage.getItem(STORAGE_KEYS.SESSION_ID);
    const resultData = localStorage.getItem(STORAGE_KEYS.RESULT_DATA);
    
    return {
      isValid: Boolean(sessionId),
      sessionId,
      hasResultData: Boolean(resultData)
    };
  } catch (error) {
    console.warn('Failed to validate session state:', error);
    return {
      isValid: false,
      sessionId: null,
      hasResultData: false
    };
  }
}

/**
 * „Éá„Éê„ÉÉ„Ç∞Áî®: ÁèæÂú®„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥Áä∂ÊÖã„ÇíÂá∫Âäõ
 */
export function debugSessionState(): void {
  if (process.env.NODE_ENV === 'development') {
    const state = validateSessionState();
    const allData = Object.fromEntries(
      Object.values(STORAGE_KEYS).map(key => [
        key,
        localStorage.getItem(key)
      ])
    );
    
    console.group('üîç NightLoom Session Debug');
    console.log('Session State:', state);
    console.log('LocalStorage Data:', allData);
    console.log('SessionStorage Keys:', Object.keys(sessionStorage));
    console.groupEnd();
  }
}
